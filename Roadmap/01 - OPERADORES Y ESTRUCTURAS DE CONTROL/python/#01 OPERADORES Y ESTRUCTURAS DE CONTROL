 # Operadores aritméticos
x = 5
y = 2
print(x + y)  # Suma: 7
print(x - y)  # Resta: 3
print(x * y)  # Multiplicación: 10
print(x / y)  # División: 2.5
print(x // y) # División entera: 2
print(x % y)  # Módulo: 1
print(x ** y) # Potencia: 25

# Operadores lógicos
'''
and: Verdadero si ambas condiciones son verdaderas.
or: Verdadero si al menos una de las condiciones es verdadera.
not: Negación de una condición.
'''
a = True
b = False
print(a and b)  # False
print(a or b)   # True
print(not a)    # False

# Operadores de comparación
'''
== (igual a)
!= (diferente de)
> (mayor que)
< (menor que)
>= (mayor o igual a)
<= (menor o igual a)
'''
x = 5
y = 10
print(x == y)  # False
print(x != y)  # True
print(x > y)   # False
print(x < y)   # True

# Operadores de asignación
'''
= (asignación simple)
+=, -=, *=, /=, etc. (operadores compuestos)
'''
x = 5
x += 3  # x = x + 3
print(x)  # 8
x *= 2  # x = x * 2
print(x)  # 16

# Operadores de identidad
'''
is: Verifica si dos variables apuntan al mismo objeto.
is not: Verifica si dos variables no apuntan al mismo objeto.
'''
a = [1, 2, 3]
b = a
c = [1, 2, 3]
print(a is b)    # True (b es el mismo objeto que a)
print(a is c)    # False (a y c no son el mismo objeto)

# Operadores de pertenencia  
'''
in: Verifica si el valor está en la secuencia.
not in: Verifica si el valor no está en la secuencia.
'''
lista = [1, 2, 3]
print(2 in lista)   # True
print(4 not in lista) # True

# Operadores de bits 
x = 5  # 0101 en binario
y = 3  # 0011 en binario
print(x & y)  # 1 (AND a nivel de bits)
print(x | y)  # 7 (OR a nivel de bits)
print(x ^ y)  # 6 (XOR a nivel de bits)
print(~x)     # -6 (negación a nivel de bits)
print(x << 1) # 10 (desplazamiento de bits)

# Estructuras de control 
'''
Condicionales (if, elif, else)
Permiten tomar decisiones en el flujo del programa.
'''
x = 10
if x > 5:
    print("Mayor que 5")
elif x == 5:
    print("Igual a 5")
else:
    print("Menor que 5")

# Iterativas for
'''
Permiten ejecutar un bloque de código repetidamente.
'''
for i in range(5):
    print(i)  # Imprime 0, 1, 2, 3, 4

# Iterativas while
i = 0
while i < 5:
    print(i)  # Imprime 0, 1, 2, 3, 4
    i += 1

# Excepciones 
'''
Permiten manejar errores de manera controlada.
'''
try:
    x = 1 / 0
except ZeroDivisionError:
    print("No se puede dividir por cero.")

# Dificultad Extra (Números entre 10 y 55)
'''
Para el programa de los números entre 10 y 55 que sean pares y no múltiplos de 3 ni el 16, puedes hacerlo así:
'''

for num in range(10, 56):
    if num % 2 == 0 and num != 16 and num % 3 != 0:
        print(num)
